#!/bin/bash -e

export PHPRC="${CLOUDWAY_WORDPRESS_DIR}/etc/php.ini"

HTTPD_CFG_DIR=$CLOUDWAY_WORDPRESS_DIR/etc/apache2
HTTPD_CFG_FILE=$HTTPD_CFG_DIR/apache2.conf
HTTPD_PASSENV_FILE=$HTTPD_CFG_DIR/conf-enabled/passenv.conf
HTTPD_PID_FILE=$CLOUDWAY_WORDPRESS_DIR/run/apache2.pid

function apache {
    /usr/sbin/apache2 -f $HTTPD_CFG_FILE -k $1
}

function start {
    configure
    write_httpd_passenv
    apache start
    ret=$?
    [ "$ret" == "0" ] && wait_for_start
    return $ret
}

function restart {
    configure
    write_httpd_passenv
    apache restart
    return $?
}

function reload {
    configure
    write_httpd_passenv
    apache graceful
    return $?
}

function stop {
    apache stop
    ret=$?
    wait_for_stop
    return $ret
}

function tidy {
    rm -rf $CLOUDWAY_WORDPRESS_LOG_DIR/*
    return 0
}

function status {
    if curl "http://127.0.0.1:$CLOUDWAY_WORDPRESS_PORT/server-status?auto" >/dev/null 2>&1; then
        echo "WordPress is running"
    else
        echo "WordPress is either stopped or inaccessible"
    fi
}

function clean_snapshot {
    rm -rf $CLOUDWAY_DATA_DIR/wordpress
}

function pre_dump {
    mkdir -p $CLOUDWAY_DATA_DIR/wordpress
    rm -rf $CLOUDWAY_DATA_DIR/wordpress/*
    cp -p $CLOUDWAY_REPO_DIR/wp-config.php $CLOUDWAY_DATA_DIR/wordpress/
    cp -Rp $CLOUDWAY_REPO_DIR/wp-content $CLOUDWAY_DATA_DIR/wordpress/
}

function post_dump {
    clean_snapshot
}

function pre_restore {
    clean_snapshot
}

function post_restore {
    if [ -d $CLOUDWAY_DATA_DIR/wordpress ]; then
        cp -Rpf $CLOUDWAY_DATA_DIR/wordpress/* $CLOUDWAY_REPO_DIR/
        configure
    fi
    clean_snapshot
}

function configure {
    if ! [ -n "$CLOUDWAY_MYSQL_DB_HOST" -a -e ${CLOUDWAY_REPO_DIR}/wp-config.php ]; then
        return 0
    fi

    WP_DB_NAME=${CLOUDWAY_APP_NAME}
    WP_DB_HOST=${CLOUDWAY_MYSQL_DB_HOST}:${CLOUDWAY_MYSQL_DB_PORT}
    WP_DB_USER=${CLOUDWAY_MYSQL_DB_USERNAME}
    WP_DB_PASS=${CLOUDWAY_MYSQL_DB_PASSWORD}

    pushd ${CLOUDWAY_REPO_DIR} 2>&1 >/dev/null

    # see http://stackoverflow.com/a/2705678/433558
    sed_escape_lhs() {
        echo "$@" | sed 's/[]\/$*.^|[]/\\&/g'
    }
    sed_escape_rhs() {
        echo "$@" | sed 's/[\/&]/\\&/g'
    }
    php_escape() {
        php -r 'var_export(('$2') $argv[1]);' "$1"
    }

    set_config() {
        key="$1"
        value="$2"
        var_type="${3:-string}"
        if [ "${key:0:1}" = '$' ]; then
            start="^(\s*)$(sed_escape_lhs "$key")\s*="
            end=";"
        else
            start="(['\"])$(sed_escape_lhs "$key")\2\s*,"
            end="\);"
        fi
        sed -ri "s/($start\s*).*($end)$/\1$(sed_escape_rhs "$(php_escape "$value" "$var_type")")\3/" wp-config.php
    }

    set_config 'DB_NAME' "$WP_DB_NAME"
    set_config 'DB_HOST' "$WP_DB_HOST"
    set_config 'DB_USER' "$WP_DB_USER"
    set_config 'DB_PASSWORD' "$WP_DB_PASS"

    # allow any of these "Authentication Unique Keys and Salts." to be specified via
    # environment variables with a "WORDPRESS_" prefix (ie, "WORDPRESS_AUTH_KEY")
    UNIQUES=(
        AUTH_KEY
        SECURE_AUTH_KEY
        LOGGED_IN_KEY
        NONCE_KEY
        AUTH_SALT
        SECURE_AUTH_SALT
        LOGGED_IN_SALT
        NONCE_SALT
    )
    for unique in "${UNIQUES[@]}"; do
        eval unique_value=\$WORDPRESS_$unique
        if [ "$unique_value" ]; then
            set_config "$unique" "$unique_value"
        else
            # if not specified, let's generate a random value
            current_set="$(sed -rn "s/define\((([\'\"])$unique\2\s*,\s*)(['\"])(.*)\3\);/\4/p" wp-config.php)"
            if [ "$current_set" = 'put your unique phrase here' ]; then
                set_config "$unique" "$(echo "$unique:$CLOUDWAY_SHARED_SECRET" | sha1sum | cut -d' ' -f1)"
            fi
        fi
    done

    popd 2>&1 >/dev/null
}

function write_httpd_passenv {
    ( for key in $(env | cut -d= -f1); do
        if [[ $key =~ ^[A-Z].* ]]; then
            echo PassEnv $key
        fi
      done ) > $HTTPD_PASSENV_FILE
}

function wait_for_start {
    [ -f "$HTTPD_PID_FILE" ] && return 0
    for i in {1..10}; do
        sleep .5
        [ -f "$HTTPD_PID_FILE" ] && break
    done
}

function wait_for_stop {
    ! [ -f "$HTTPD_PID_FILE" ] && return 0
    for i in {1..10}; do
        sleep .5
        ! [ -f "$HTTPD_PID_FILE" ] && break
    done
}

case "$1" in
    start)        echo "Starting WordPress";    start ;;
    stop)         echo "Stopping WordPress";    stop ;;
    restart)      echo "Restarting WordPress";  restart ;;
    reload)       echo "Reloading WordPress";   reload ;;
    status)       status ;;
    pre-dump)     pre_dump ;;
    post-dump)    post_dump ;;
    pre-restore)  pre_restore ;;
    post-restore) post_restore ;;
    tidy)         tidy ;;
    *)            exit 0
esac

exit $?
