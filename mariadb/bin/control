#!/bin/bash -e

pidfile=$CLOUDWAY_MARIADB_DIR/run/mysql.pid

function run_sql {
  echo "$@" | /usr/bin/mysql \
                -S "$CLOUDWAY_MYSQL_DB_SOCKET" \
                -u "$CLOUDWAY_MYSQL_DB_USERNAME" \
                --password="$CLOUDWAY_MYSQL_DB_PASSWORD" \
                --skip-column-names
}

function is_running {
  if [ -f $pidfile ]; then
    mysql_pid=$(< $pidfile)
    myid=$(id -u)
    if $(ps --pid $mysql_pid > /dev/null 2>&1) || $(pgrep -x mysqld_safe -u $myid > /dev/null 2>&1); then
      return 0
    fi
  fi
  return 1
}

function start {
  if ! is_running; then
    echo "Starting MariaDB $CLOUDWAY_MARIADB_VERSION"
    rm -f $CLOUDWAY_MARIADB_LOG_DIR/mysql*.log
    /usr/bin/mysqld_safe --defaults-file=$CLOUDWAY_MARIADB_DIR/conf/my.cnf --log-error=$CLOUDWAY_MARIADB_LOG_DIR/stdout.err > /dev/null 2>&1 &
    wait_for_start
    initdb
  else
    echo "MariaDB already running"
  fi
}

function wait_for_start {
  for i in {1..20}; do
    if is_running; then
      return 0
    fi
    sleep 1
  done

  echo "MariaDB server failed to start:"
  exit 1
}

function initdb {
  local hostname=$CLOUDWAY_MYSQL_DB_HOST
  local username=$CLOUDWAY_MYSQL_DB_USERNAME
  local password=$CLOUDWAY_MYSQL_DB_PASSWORD
  local socket=$CLOUDWAY_MYSQL_DB_SOCKET
  local dbname=$CLOUDWAY_APP_NAME

  local sql=$(
    # create default database
    echo "create database if not exists ${dbname} default character set utf8 default collate utf8_general_ci;"

    # grant local access permissions
    cat <<EOF
delete from user where user='$username' or user='root' or user='';
grant all on *.* to '$username'@'127.0.0.1' identified by '$password' with grant option;
grant all on *.* to '$username'@'::1' identified by '$password' with grant option;
grant all on *.* to '$username'@'localhost' identified by '$password' with grant option;
grant all on *.* to '$username'@'%' identified by '$password' with grant option;
EOF

    echo "flush privileges;"
  )

  echo "$sql" | /usr/bin/mysql -u $username --password=$password -S $socket mysql > /dev/null 2>&1 || \
  echo "$sql" | /usr/bin/mysql -u root -S $socket mysql > /dev/null 2>&1 || \
  echo "Failed to initialize database"
}

function stop {
  if is_running; then
    if [ -f $pidfile ]; then
      echo "Stopping MariaDB ${CLOUDWAY_MARIADB_VERSION}"
      local pid=$(< $pidfile)
      if kill $pid; then
        local timeout=20
        while [[ $timeout > 0 && -f $pidfile ]]; do
          kill -0 "$pid" > /dev/null 2>&1 || break
          sleep 1
          (( timeout-= 1))
        done
      fi
    else
      if $(pgrep -x mysqld_safe > /dev/null 2>&1); then
        echo "Warning: MariaDB process exists without a pid file." 1>&2
      else
        echo "MariaDB already stopped" 1>&2
      fi
    fi
  fi
}

function status {
  if is_running; then
    echo "MariaDB is running"
  else
    echo "MariaDB is stopped"
  fi
  exit 0
}

function pre_dump {
  mkdir -p $CLOUDWAY_DATA_DIR/mysql

  echo "$CLOUDWAY_APP_NAME" > $CLOUDWAY_DATA_DIR/mysql/db_name
  echo "$CLOUDWAY_MYSQL_DB_USERNAME" > $CLOUDWAY_DATA_DIR/mysql/db_user

  {
    /usr/bin/mysqldump \
        --extended-insert --quick \
        -S $CLOUDWAY_MYSQL_DB_SOCKET \
        -u $CLOUDWAY_MYSQL_DB_USERNAME\
        --password=$CLOUDWAY_MYSQL_DB_PASSWORD \
        --all-databases --events --triggers --routines --add-drop-table \
    | gzip > "$CLOUDWAY_DATA_DIR/mysql/dump.gz"
  } ||
  {
    echo >&2 "Warning: could not dump mysql database."
    rm -rf "$CLOUDWAY_DATA_DIR/mysql"
  }
}

function post_dump {
  rm -rf "$CLOUDWAY_DATA_DIR/mysql"
}

function pre_restore {
  true
}

function post_restore {
  if [ -f "$CLOUDWAY_DATA_DIR/mysql/dump.gz" ]; then
    local db_sock="$CLOUDWAY_MYSQL_DB_SOCKET"
    local db_name="$CLOUDWAY_APP_NAME"
    local db_user="$CLOUDWAY_MYSQL_DB_USERNAME"
    local db_pass="$CLOUDWAY_MYSQL_DB_PASSWORD"

    # Restore stashed variables and get current variables
    local old_name=$(< $CLOUDWAY_DATA_DIR/mysql/db_name)
    local old_user=$(< $CLOUDWAY_DATA_DIR/mysql/db_user)

    # Drop and recreate current database
    run_sql "DROP DATABASE IF EXISTS \`$db_name\`;"
    run_sql "CREATE DATABASE \`$db_name\`;"

    # Restore the old database verbatim, this will be using the old database name
    (
      echo "SET AUTOCOMMIT=0;"
      echo "SET UNIQUE_CHECKS=0;"
      echo "SET FOREIGN_KEY_CHECKS=0;"
      zcat $CLOUDWAY_DATA_DIR/mysql/dump.gz
      echo "SET FOREIGN_KEY_CHECKS=1;"
      echo "SET UNIQUE_CHECKS=1;"
      echo "SET AUTOCOMMIT=1;"
      echo "COMMIT;"
    ) | /usr/bin/mysql -S $db_sock -u $db_user --password=$db_pass --skip-column-names

    # Grant permissions to the current user
    run_sql "GRANT ALL ON *.* TO '$db_user'@'%' IDENTIFIED BY '$db_pass' WITH GRANT OPTION;"

    # Only run the following if the username is different
    if [ "$old_user" != "$db_user" ]; then
      for host in $(run_sql "SELECT Host FROM mysql.user WHERE user.user='$old_user'"); do
        run_sql "DROP USER \`$old_user\`@'$host';"
      done
    fi

    # Refresh the privileges
    run_sql "FLUSH PRIVILEGES;"

    # Only run the following if the database name has changed
    if [ "$old_name" != "$db_name" ]; then
      # Dump the old database and restore it into the new database
      # This approach provides relational consistency and will work with tables, views, triggers, etc
      /usr/bin/mysqldump -S "$db_sock" -P "$db_port" -u "$db_user" --password="$db_pass" $old_name | \
      /usr/bin/mysql     -S "$db_sock" -P "$db_port" -u "$db_user" --password="$db_pass" $db_name

      # Drop the old database
      run_sql "DROP DATABASE \`$old_name\`;"
    fi
  fi

  # Cleanup
  rm -rf "$CLOUDWAY_DATA_DIR/mysql"
}

function tidy {
  shopt -s dotglob
  rm -rf $CLOUDWAY_MARIADB_LOG_DIR/mysql.log*
}

case "$1" in
  start)        start ;;
  stop)         stop ;;
  restart)      stop; start ;;
  status)       status ;;
  pre-dump)     pre_dump ;;
  post-dump)    post_dump ;;
  pre-restore)  pre_restore ;;
  post-restore) post_restore ;;
  tidy)         tidy ;;
  *)            exit 0 ;;
esac

exit $?
